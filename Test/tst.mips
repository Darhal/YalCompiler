.data
	div_by0: .asciiz "[RUNTIME ERROR]:SEMANTICS: Division by zero is forbidden.\n"
	arr_sz_err: .asciiz "[RUNTIME ERROR]:SEMANTICS: Array size can't be zero or negative.\n"
	out_of_bound: .asciiz "[RUNTIME ERROR]:SEMANTICS: Array index is out of bound.\n"
	negative_index: .asciiz "[RUNTIME ERROR]:SEMANTICS: Array index can't be negative.\n"
	arr_cpy_err: .asciiz "[RUNTIME ERROR]:SEMANTICS: Attempt to perform an array copy on an array that doesn't have the same size as the source.\n"
	true_str: .asciiz "vrai\n"
	false_str: .asciiz "faux\n"
.text

main:
	# Begin stackframe:
	move $s7, $sp
	# Initialize variables to 0:
	sw $zero, 0($sp)
	# Allocate for the declared variables:
	addi $sp, $sp, -4

	# Integer Constant '25':
	li $v0, 25
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0

	# Call write sys call:
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '13':
	li $v0, 13
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Call write sys call:
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '13':
	li $v0, 13
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Call write sys call:
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0

	# Call write sys call:
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '16':
	li $v0, 16
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Call write sys call:
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0

	# Call write sys call:
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '100':
	li $v0, 100
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Call write sys call:
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '2':
	li $v0, 2
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '100':
	li $v0, 100
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Call write sys call:
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sne $v0, $v0, $zero 	# ($v0 != $zero) ? 1 : 0
	sne $t8, $t8, $zero 	# ($t8 != $zero) ? 1 : 0
	seq $v0, $t8, $v0

	 # Call write routine for logical expressions
	jal write_logical

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	seq $v0, $zero, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sne $v0, $v0, $zero 	# ($v0 != $zero) ? 1 : 0
	sne $t8, $t8, $zero 	# ($t8 != $zero) ? 1 : 0
	seq $v0, $t8, $v0
	seq $v0, $zero, $v0

	 # Call write routine for logical expressions
	jal write_logical

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '26':
	li $v0, 26
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Greater
	slt $v0, $v0, $t8
	seq $v0, $zero, $v0

	 # Call write routine for logical expressions
	jal write_logical

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '24':
	li $v0, 24
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	seq $v0, $zero, $v0

	 # Call write routine for logical expressions
	jal write_logical

	# Integer Constant '1':
	li $v0, 1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '3':
	li $v0, 3
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Greater
	slt $v0, $v0, $t8
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Greater
	slt $v0, $v0, $t8
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	seq $v0, $zero, $v0

	 # Call write routine for logical expressions
	jal write_logical

	# Integer Constant '1':
	li $v0, 1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '3':
	li $v0, 3
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Greater
	slt $v0, $v0, $t8
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Greater
	slt $v0, $v0, $t8
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Call write routine for logical expressions
	jal write_logical

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '3':
	li $v0, 3
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Greater
	slt $v0, $v0, $t8
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Call write routine for logical expressions
	jal write_logical

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Greater
	slt $v0, $v0, $t8
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Call write routine for logical expressions
	jal write_logical

	# Integer Constant '5':
	li $v0, 5

	# Assignement for the variable 'a':
	li $t2, 0
	jal search_var
	sw $v0, 0($t1)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sne $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sne $v0, $v0, $zero 	# ($v0 != $zero) ? 1 : 0
	sne $t8, $t8, $zero 	# ($t8 != $zero) ? 1 : 0
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Call write routine for logical expressions
	jal write_logical

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sne $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sne $v0, $v0, $zero 	# ($v0 != $zero) ? 1 : 0
	sne $t8, $t8, $zero 	# ($t8 != $zero) ? 1 : 0
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sne $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Call write routine for logical expressions
	jal write_logical

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sne $v0, $v0, $zero 	# ($v0 != $zero) ? 1 : 0
	sne $t8, $t8, $zero 	# ($t8 != $zero) ? 1 : 0
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sne $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sne $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Call write routine for logical expressions
	jal write_logical

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sne $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sne $v0, $v0, $zero 	# ($v0 != $zero) ? 1 : 0
	sne $t8, $t8, $zero 	# ($t8 != $zero) ? 1 : 0
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sne $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Call write routine for logical expressions
	jal write_logical

	# Handle program exit
exit:
	li $v0, 10
	syscall

	 # Handle RUNTIME errors
runtime_err:
	li $v0, 4
	syscall
	j exit

	 # Write logical expression
write_logical:	beq $v0, $zero, false_lbl
true_lbl:
	la $a0, true_str
	li $v0, 4
	syscall
	jr $ra
false_lbl:
	la $a0, false_str
	li $v0, 4
	syscall
jr $ra

	 # Normalise logical expression
nrml_logical:
	sne $v0, $v0, $zero 	# ($v0 != $zero) ? 1 : 0
jr $ra

	 # Handle division by 0 error
div_by_zero:
	la $a0, div_by0
	j runtime_err

	# Handle out of bound array index
print_bound_err:
	la $a0, out_of_bound
	j runtime_err

	# Handle negative array index
print_negative_index_err:
	la $a0, negative_index
	j runtime_err

	 # Handle negative array size errors
arr_sz:
	la $a0, arr_sz_err
	j runtime_err

	 # Handle memcpy errors
memcpy_err:
	la $a0, arr_cpy_err
	j runtime_err

	# Sub routine to find variables outside of the local scope:
	# $t1: temp base local | $t2: wanted bloc id | $s0: temp bloc id
search_var:
	move $t1, $s7
search_loop:
	lw $s0, 4($t1)
	sub $s0, $s0, $t2
	beqz $s0, search_loop_end
	lw $t1, 8($t1)
	j search_loop
search_loop_end:
	jr $ra	#Resume normal execution

	# Allocate array the array size should be in a0, address is in $v0
	# returned address will be in a0:
	allocate_array:
	blez $a0, arr_sz
	addi $a0, $a0, 1 	 # Adding the size of the table
	# multiply a0 by 4:
	li $t4, 4
	multu $a0, $t4
	mflo $a0
	li $t4, 4
	li $v0, 9 	# sbrk syscall
	syscall
 	# Issue the syscall
	# Initialize the array
	subi $a0, $a0, 4 	 # Substract the size of the table
	sw $a0, 0($v0)
	li $t3, 0
init_loop:
	addi $t3, $t3, 4
	addi $v0, $v0, 4
	sw $zero, ($v0)
	bne $t3, $a0, init_loop
	sub $v0, $v0, $t3 	 # restore to the original address
	jr $ra 	#Resume normal execution

	# Get value from an array index should be in $a0, table address is in $v0, value is returned in $v0
get_arr_element_value:
	bltz $a0, print_negative_index_err	 # Branch if the index is negative then print error and exit
	# multiply a0 by 4:
	li $t4, 4
	mult $a0, $t4
	mflo $a0
	lw $t2, 0($v0) 	# Get the size of the array
	sub $t2, $t2, $a0
	blez $t2, print_bound_err	 # Branch on less than or equal to zero (if size - index <= 0) then print error and exit
	addi $v0, $v0, 4 	# Skip first index it have the size
	add $v0, $v0, $a0 	# $v0 now have the exact address of the element we are searching for
	lw $v0, ($v0)	 # Get the value in the address of $v0 into $v0 register and then return
	jr $ra 	#Resume normal execution

	# Get address from an array. index should be in $a0, table address is in $v0, element address is returned in $v0
get_arr_element_address:
	bltz $a0, print_negative_index_err	 # Branch if the index is negative then print error and exit
	# multiply a0 by 4:
	li $t4, 4
	multu $a0, $t4
	mflo $a0
	lw $t2, 0($v0) 	# Get the size of the array
	sub $t2, $t2, $a0
	blez $t2, print_bound_err	 # Branch on less than or equal to zero (if size - index <= 0) then print error and exit
	addi $v0, $v0, 4 	# Skip first index it have the size
	add $v0, $v0, $a0 	# $v0 now have the exact address of the element we are searching for
	jr $ra 	#Resume normal execution

# Memory copy function to copy content of one table to another: 
	# $t0 = $a0
memcpy:
	lw $t3, 0($t0)
	lw $a1, 0($a0)
	bne $a1, $t3, memcpy_err
	add $a1, $a1, $a0
memcpy_loop:
	addi $t0, $t0, 4
	addi $a0, $a0, 4
	lw $t3, 0($a0)
	sw $t3, 0($t0)
	bne $a0, $a1, memcpy_loop
	jr $ra 	#Resume normal execution

	# Compare two arrays ($v0 first array and $t8 second array)
compare_arr:
	lw $t3, 0($v0)
	lw $a1, 0($t8)
	bne $a1, $t3, not_eq
	add $a1, $a1, $t8
compare_loop:
	addi $v0, $v0, 4
	addi $t8, $t8, 4
	lw $t3, 0($t8)
	lw $t4, 0($v0)
	bne $t3, $t4, not_eq
	bne $t8, $a1, compare_loop
	li $v0, 1 	# Both arrays are equal
	jr $ra 	#Resume normal execution
not_eq:
	li $v0, 0 	# Both arrays aren't equal
	jr $ra 	#Resume normal execution

