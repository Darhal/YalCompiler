.data
	div_by0: .asciiz "[RUNTIME ERROR]:SEMANTICS: Division by zero is forbidden.\n"
	arr_sz_err: .asciiz "[RUNTIME ERROR]:SEMANTICS: Array size can't be zero or negative.\n"
	out_of_bound: .asciiz "[RUNTIME ERROR]:SEMANTICS: Array index is out of bound.\n"
	negative_index: .asciiz "[RUNTIME ERROR]:SEMANTICS: Array index can't be negative.\n"
	arr_cpy_err: .asciiz "[RUNTIME ERROR]:SEMANTICS: Attempt to perform an array copy on an array that doesn't have the same size as the source.\n"
	true_str: .asciiz "vrai\n"
	false_str: .asciiz "faux\n"
.text

main:
	# Begin stackframe:
	move $s7, $sp
	# Initialize variables to 0:
	sw $zero, 0($sp)
	# Allocate for the declared variables:
	addi $sp, $sp, -4

	# Calculating the size of the array 'f' (size in $v0): 
	# Integer Constant '100':
	li $v0, 100
	move $a0, $v0
	jal allocate_array
	sw $v0, 0($s7)

	# Integer Constant '0':
	li $v0, 0
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '0':
	li $v0, 0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '3':
	li $v0, 3
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '8':
	li $v0, 8
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '21':
	li $v0, 21
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '10':
	li $v0, 10
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '55':
	li $v0, 55
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '18':
	li $v0, 18
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2584':
	li $v0, 2584
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '23':
	li $v0, 23
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '28657':
	li $v0, 28657
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_150795627
wtrue_150795627:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_150795627
wfalse_150795627:
	la $a0, false_str
	li $v0, 4
	syscall
wend_150795627:

	# Integer Constant '0':
	li $v0, 0
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '0':
	li $v0, 0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '3':
	li $v0, 3
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '8':
	li $v0, 8
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '21':
	li $v0, 21
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '10':
	li $v0, 10
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '55':
	li $v0, 55
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '18':
	li $v0, 18
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2584':
	li $v0, 2584
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '23':
	li $v0, 23
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_itr_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '28657':
	li $v0, 28657
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_4186783604
wtrue_4186783604:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_4186783604
wfalse_4186783604:
	la $a0, false_str
	li $v0, 4
	syscall
wend_4186783604:

	# Integer Constant '0':
	li $v0, 0
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '0':
	li $v0, 0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '3':
	li $v0, 3
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '8':
	li $v0, 8
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '21':
	li $v0, 21
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '10':
	li $v0, 10
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '55':
	li $v0, 55
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '18':
	li $v0, 18
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2584':
	li $v0, 2584
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '23':
	li $v0, 23
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '28657':
	li $v0, 28657
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_553827269
wtrue_553827269:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_553827269
wfalse_553827269:
	la $a0, false_str
	li $v0, 4
	syscall
wend_553827269:

	# Integer Constant '0':
	li $v0, 0
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '0':
	li $v0, 0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '3':
	li $v0, 3
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '8':
	li $v0, 8
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '21':
	li $v0, 21
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '10':
	li $v0, 10
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '55':
	li $v0, 55
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '18':
	li $v0, 18
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2584':
	li $v0, 2584
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '23':
	li $v0, 23
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '28657':
	li $v0, 28657
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_2109921276
wtrue_2109921276:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_2109921276
wfalse_2109921276:
	la $a0, false_str
	li $v0, 4
	syscall
wend_2109921276:

	# Handle program exit
exit:
	li $v0, 10
	syscall

	 # Handle RUNTIME errors
runtime_err:
	li $v0, 4
	syscall
	j exit

	 # Handle division by 0 error
div_by_zero:
	la $a0, div_by0
	j runtime_err

	# Handle out of bound array index
print_bound_err:
	la $a0, out_of_bound
	j runtime_err

	# Handle negative array index
print_negative_index_err:
	la $a0, negative_index
	j runtime_err

	 # Handle negative array size errors
arr_sz:
	la $a0, arr_sz_err
	j runtime_err

	 # Handle memcpy errors
memcpy_err:
	la $a0, arr_cpy_err
	j runtime_err

	# Sub routine to find variables outside of the local scope:
	# $t1: temp base local | $t2: wanted bloc id | $s0: temp bloc id
search_var:
	move $t1, $s7
search_loop:
	lw $s0, 4($t1)
	sub $s0, $s0, $t2
	beqz $s0, search_loop_end
	lw $t1, 8($t1)
	j search_loop
search_loop_end:
	jr $ra	#Resume normal execution

	# Allocate array the array size should be in a0, address is in $v0
	# returned address will be in a0:
	allocate_array:
	blez $a0, arr_sz
	addi $a0, $a0, 1 	 # Adding the size of the table
	# multiply a0 by 4:
	li $t4, 4
	multu $a0, $t4
	mflo $a0
	li $t4, 4
	li $v0, 9 	# sbrk syscall
	syscall
 	# Issue the syscall
	# Initialize the array
	subi $a0, $a0, 4 	 # Substract the size of the table
	sw $a0, 0($v0)
	li $t3, 0
init_loop:
	addi $t3, $t3, 4
	addi $v0, $v0, 4
	sw $zero, ($v0)
	bne $t3, $a0, init_loop
	sub $v0, $v0, $t3 	 # restore to the original address
	jr $ra 	#Resume normal execution

	# Get value from an array index should be in $a0, table address is in $v0, value is returned in $v0
get_arr_element_value:
	bltz $a0, print_negative_index_err	 # Branch if the index is negative then print error and exit
	# multiply a0 by 4:
	li $t4, 4
	mult $a0, $t4
	mflo $a0
	lw $t2, 0($v0) 	# Get the size of the array
	sub $t2, $t2, $a0
	blez $t2, print_bound_err	 # Branch on less than or equal to zero (if size - index <= 0) then print error and exit
	addi $v0, $v0, 4 	# Skip first index it have the size
	add $v0, $v0, $a0 	# $v0 now have the exact address of the element we are searching for
	lw $v0, ($v0)	 # Get the value in the address of $v0 into $v0 register and then return
	jr $ra 	#Resume normal execution

	# Get address from an array. index should be in $a0, table address is in $v0, element address is returned in $v0
get_arr_element_address:
	bltz $a0, print_negative_index_err	 # Branch if the index is negative then print error and exit
	# multiply a0 by 4:
	li $t4, 4
	multu $a0, $t4
	mflo $a0
	lw $t2, 0($v0) 	# Get the size of the array
	sub $t2, $t2, $a0
	blez $t2, print_bound_err	 # Branch on less than or equal to zero (if size - index <= 0) then print error and exit
	addi $v0, $v0, 4 	# Skip first index it have the size
	add $v0, $v0, $a0 	# $v0 now have the exact address of the element we are searching for
	jr $ra 	#Resume normal execution

# Memory copy function to copy content of one table to another: 
	# $t0 = $a0
memcpy:
	lw $t3, 0($t0)
	lw $a1, 0($a0)
	bne $a1, $t3, memcpy_err
	add $a1, $a1, $a0
memcpy_loop:
	addi $t0, $t0, 4
	addi $a0, $a0, 4
	lw $t3, 0($a0)
	sw $t3, 0($t0)
	bne $a0, $a1, memcpy_loop
	jr $ra 	#Resume normal execution

	# Declaration of function: fib_rec_p1
fib_rec_p1:
	# Pushing in the function environments (Creating the stack frame)
	# Return address:
	sw $ra, -0($sp)
	# Dynamic linking:
	sw $s7, -4($sp)
	# No bloc:
	li $t8, 1
	sw $t8, -8($sp)
	# Reserve the space for variables: 
	addi $sp, $sp, -12
	move $s7, $sp
	# Function instructions 

	# Condition Instruction:
	# Get value of the variable 'n':
	li $t2, 1
	jal search_var
	lw $v0, 16($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'n':
	li $t2, 1
	jal search_var
	lw $v0, 16($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '0':
	li $v0, 0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	beq $v0, $zero, sinon_2810797274	 # Skip the condition if v0 is equal to zero
	# Begin of the instruction inside SI branch:

	# Get value of the variable 'n':
	li $t2, 1
	jal search_var
	lw $v0, 16($t1)
	j fib_rec_p1_fin

	j fsi_2810797274

sinon_2810797274:
	# End of the branch
fsi_2810797274:

	# Get value of the variable 'n':
	li $t2, 1
	jal search_var
	lw $v0, 16($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'n':
	li $t2, 1
	jal search_var
	lw $v0, 16($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_p1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	j fib_rec_p1_fin
	# End of the function routine :
fib_rec_p1_fin:
	# Popping out the function environments (Popping the stack frame): 
	addi $sp, $sp, 16
	lw $ra, -4($sp)
	lw $s7, -8($sp)
	jr $ra


	# Declaration of function: fib_itr_dp_p1
fib_itr_dp_p1:
	# Pushing in the function environments (Creating the stack frame)
	# Return address:
	sw $ra, -0($sp)
	# Dynamic linking:
	sw $s7, -4($sp)
	# No bloc:
	li $t8, 3
	sw $t8, -8($sp)
	# Reserve the space for variables: 
	addi $sp, $sp, -12
	move $s7, $sp
	# Initialize local variables to 0:
	sw $zero, 0($sp)
	sw $zero, -4($sp)
	addi $sp, $sp, -8

	# Calculating the size of the array 'f' (size in $v0): 
	# Get value of the variable 'n':
	li $t2, 3
	jal search_var
	lw $v0, 16($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	move $a0, $v0
	jal allocate_array
	sw $v0, -4($s7)
	# Function instructions 

	# Integer Constant '0':
	li $v0, 0

	# Assignement for the variable 'f':
	li $t2, 3
	jal search_var
	move $t3, $v0
	lw $v0, -4($t1)
	move $t4, $v0

	# Integer Constant '0':
	li $v0, 0
	move $a0, $v0
	move $v0, $t4
	jal get_arr_element_address
	sw $t3, ($v0)

	# Integer Constant '1':
	li $v0, 1

	# Assignement for the variable 'f':
	li $t2, 3
	jal search_var
	move $t3, $v0
	lw $v0, -4($t1)
	move $t4, $v0

	# Integer Constant '1':
	li $v0, 1
	move $a0, $v0
	move $v0, $t4
	jal get_arr_element_address
	sw $t3, ($v0)

	# Integer Constant '2':
	li $v0, 2

	# Assignement for the variable 'i':
	li $t2, 3
	jal search_var
	sw $v0, 0($t1)
start_loop_317488443:

	# Get value of the variable 'i':
	li $t2, 3
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'n':
	li $t2, 3
	jal search_var
	lw $v0, 16($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'i':
	li $t2, 3
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'n':
	li $t2, 3
	jal search_var
	lw $v0, 16($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	# Branch Instruction:
	beq $v0, $zero, end_loop_317488443
	# Loop instructions:
	# Get value of the variable 'i':
	li $t2, 3
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0

	# Get the address of the array 'f':
	move $a0, $v0 	# Save the index in $a0
	li $t2, 3
	jal search_var
	lw $v0, -4($t1)
	jal get_arr_element_value
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'i':
	li $t2, 3
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0

	# Get the address of the array 'f':
	move $a0, $v0 	# Save the index in $a0
	li $t2, 3
	jal search_var
	lw $v0, -4($t1)
	jal get_arr_element_value
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Assignement for the variable 'f':
	li $t2, 3
	jal search_var
	move $t3, $v0
	lw $v0, -4($t1)
	move $t4, $v0

	# Get value of the variable 'i':
	li $t2, 3
	jal search_var
	lw $v0, 0($t1)
	move $a0, $v0
	move $v0, $t4
	jal get_arr_element_address
	sw $t3, ($v0)

	# Get value of the variable 'i':
	li $t2, 3
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Assignement for the variable 'i':
	li $t2, 3
	jal search_var
	sw $v0, 0($t1)
	bne $v0, $zero, start_loop_317488443
end_loop_317488443:

	# Get value of the variable 'n':
	li $t2, 3
	jal search_var
	lw $v0, 16($t1)

	# Get the address of the array 'f':
	move $a0, $v0 	# Save the index in $a0
	li $t2, 3
	jal search_var
	lw $v0, -4($t1)
	jal get_arr_element_value
	j fib_itr_dp_p1_fin
	# End of the function routine :
fib_itr_dp_p1_fin:
	# Popping out the function environments (Popping the stack frame): 
	addi $sp, $sp, 24
	lw $ra, -4($sp)
	lw $s7, -8($sp)
	jr $ra


	# Declaration of function: fib_itr_p1
fib_itr_p1:
	# Pushing in the function environments (Creating the stack frame)
	# Return address:
	sw $ra, -0($sp)
	# Dynamic linking:
	sw $s7, -4($sp)
	# No bloc:
	li $t8, 2
	sw $t8, -8($sp)
	# Reserve the space for variables: 
	addi $sp, $sp, -12
	move $s7, $sp
	# Initialize local variables to 0:
	sw $zero, 0($sp)
	sw $zero, -4($sp)
	sw $zero, -8($sp)
	sw $zero, -12($sp)
	addi $sp, $sp, -16
	# Function instructions 

	# Condition Instruction:
	# Get value of the variable 'n':
	li $t2, 2
	jal search_var
	lw $v0, 16($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '0':
	li $v0, 0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	beq $v0, $zero, sinon_1195736740	 # Skip the condition if v0 is equal to zero
	# Begin of the instruction inside SI branch:

	# Integer Constant '0':
	li $v0, 0
	j fib_itr_p1_fin

	j fsi_1195736740

sinon_1195736740:
	# End of the branch
fsi_1195736740:

	# Integer Constant '0':
	li $v0, 0

	# Assignement for the variable 'i':
	li $t2, 2
	jal search_var
	sw $v0, 0($t1)

	# Integer Constant '1':
	li $v0, 1

	# Assignement for the variable 'j':
	li $t2, 2
	jal search_var
	sw $v0, -4($t1)

	# Integer Constant '1':
	li $v0, 1

	# Assignement for the variable 'k':
	li $t2, 2
	jal search_var
	sw $v0, -8($t1)
start_loop_2811640778:

	# Get value of the variable 'k':
	li $t2, 2
	jal search_var
	lw $v0, -8($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'n':
	li $t2, 2
	jal search_var
	lw $v0, 16($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	# Branch Instruction:
	beq $v0, $zero, end_loop_2811640778
	# Loop instructions:
	# Get value of the variable 'i':
	li $t2, 2
	jal search_var
	lw $v0, 0($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'j':
	li $t2, 2
	jal search_var
	lw $v0, -4($t1)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Assignement for the variable 't':
	li $t2, 2
	jal search_var
	sw $v0, -12($t1)

	# Get value of the variable 'j':
	li $t2, 2
	jal search_var
	lw $v0, -4($t1)

	# Assignement for the variable 'i':
	li $t2, 2
	jal search_var
	sw $v0, 0($t1)

	# Get value of the variable 't':
	li $t2, 2
	jal search_var
	lw $v0, -12($t1)

	# Assignement for the variable 'j':
	li $t2, 2
	jal search_var
	sw $v0, -4($t1)

	# Get value of the variable 'k':
	li $t2, 2
	jal search_var
	lw $v0, -8($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Assignement for the variable 'k':
	li $t2, 2
	jal search_var
	sw $v0, -8($t1)
	bne $v0, $zero, start_loop_2811640778
end_loop_2811640778:

	# Get value of the variable 'j':
	li $t2, 2
	jal search_var
	lw $v0, -4($t1)
	j fib_itr_p1_fin
	# End of the function routine :
fib_itr_p1_fin:
	# Popping out the function environments (Popping the stack frame): 
	addi $sp, $sp, 32
	lw $ra, -4($sp)
	lw $s7, -8($sp)
	jr $ra


	# Declaration of function: fib_rec_dp_p1
fib_rec_dp_p1:
	# Pushing in the function environments (Creating the stack frame)
	# Return address:
	sw $ra, -0($sp)
	# Dynamic linking:
	sw $s7, -4($sp)
	# No bloc:
	li $t8, 4
	sw $t8, -8($sp)
	# Reserve the space for variables: 
	addi $sp, $sp, -12
	move $s7, $sp
	# Function instructions 

	# Condition Instruction:
	# Get value of the variable 'n':
	li $t2, 4
	jal search_var
	lw $v0, 16($t1)

	# Get the address of the array 'f':
	move $a0, $v0 	# Save the index in $a0
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	jal get_arr_element_value
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '0':
	li $v0, 0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	beq $v0, $zero, sinon_3267104211	 # Skip the condition if v0 is equal to zero
	# Begin of the instruction inside SI branch:

	# Condition Instruction:
	# Get value of the variable 'n':
	li $t2, 4
	jal search_var
	lw $v0, 16($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'n':
	li $t2, 4
	jal search_var
	lw $v0, 16($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	seq $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	beq $v0, $zero, sinon_540891317	 # Skip the condition if v0 is equal to zero
	# Begin of the instruction inside SI branch:

	# Get value of the variable 'n':
	li $t2, 4
	jal search_var
	lw $v0, 16($t1)

	# Assignement for the variable 'f':
	li $t2, 0
	jal search_var
	move $t3, $v0
	lw $v0, 0($t1)
	move $t4, $v0

	# Get value of the variable 'n':
	li $t2, 4
	jal search_var
	lw $v0, 16($t1)
	move $a0, $v0
	move $v0, $t4
	jal get_arr_element_address
	sw $t3, ($v0)

	j fsi_540891317

sinon_540891317:
	# Begin of the SINON branch

	# Get value of the variable 'n':
	li $t2, 4
	jal search_var
	lw $v0, 16($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_dp_p1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'n':
	li $t2, 4
	jal search_var
	lw $v0, 16($t1)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	sw $v0, -0($sp)
	addi $sp, $sp, -4

	jal fib_rec_dp_p1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Assignement for the variable 'f':
	li $t2, 0
	jal search_var
	move $t3, $v0
	lw $v0, 0($t1)
	move $t4, $v0

	# Get value of the variable 'n':
	li $t2, 4
	jal search_var
	lw $v0, 16($t1)
	move $a0, $v0
	move $v0, $t4
	jal get_arr_element_address
	sw $t3, ($v0)
	# End of the branch
fsi_540891317:

	j fsi_3267104211

sinon_3267104211:
	# End of the branch
fsi_3267104211:

	# Get value of the variable 'n':
	li $t2, 4
	jal search_var
	lw $v0, 16($t1)

	# Get the address of the array 'f':
	move $a0, $v0 	# Save the index in $a0
	li $t2, 0
	jal search_var
	lw $v0, 0($t1)
	jal get_arr_element_value
	j fib_rec_dp_p1_fin
	# End of the function routine :
fib_rec_dp_p1_fin:
	# Popping out the function environments (Popping the stack frame): 
	addi $sp, $sp, 16
	lw $ra, -4($sp)
	lw $s7, -8($sp)
	jr $ra


