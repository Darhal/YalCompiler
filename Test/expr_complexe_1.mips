.data
	div_by0: .asciiz "[RUNTIME ERROR]: Division by zero detected.\n"
	true_str: .asciiz "vrai\n"
	false_str: .asciiz "faux\n"
.text

main:
	# Begin stackframe:
	move $s7, $sp
	# Allocate for the declared variables:
	addi $sp, $sp, -4

	# Integer Constant '25':
	li $v0, 25
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '13':
	li $v0, 13
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '13':
	li $v0, 13
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '16':
	li $v0, 16
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '100':
	li $v0, 100
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '2':
	li $v0, 2
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '100':
	li $v0, 100
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '25':
	li $v0, 25
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_4011
wtrue_4011:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_4011
wfalse_4011:
	la $a0, false_str
	li $v0, 4
	syscall
wend_4011:
	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '25':
	li $v0, 25
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	nor $v0, $v0, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_2468
wtrue_2468:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_2468
wfalse_2468:
	la $a0, false_str
	li $v0, 4
	syscall
wend_2468:
	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '26':
	li $v0, 26
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	slt $v0, $v0, $t8
	nor $v0, $v0, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_8415
wtrue_8415:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_8415
wfalse_8415:
	la $a0, false_str
	li $v0, 4
	syscall
wend_8415:
	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '24':
	li $v0, 24
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	nor $v0, $v0, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_1014
wtrue_1014:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_1014
wfalse_1014:
	la $a0, false_str
	li $v0, 4
	syscall
wend_1014:
	# Integer Constant '1':
	li $v0, 1
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '3':
	li $v0, 3
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	slt $v0, $v0, $t8
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	slt $v0, $v0, $t8
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	nor $v0, $v0, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_7743
wtrue_7743:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_7743
wfalse_7743:
	la $a0, false_str
	li $v0, 4
	syscall
wend_7743:
	# Integer Constant '1':
	li $v0, 1
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '3':
	li $v0, 3
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	slt $v0, $v0, $t8
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	slt $v0, $v0, $t8
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_108
wtrue_108:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_108
wfalse_108:
	la $a0, false_str
	li $v0, 4
	syscall
wend_108:
	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '3':
	li $v0, 3
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	slt $v0, $v0, $t8
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '1':
	li $v0, 1
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_807
wtrue_807:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_807
wfalse_807:
	la $a0, false_str
	li $v0, 4
	syscall
wend_807:
	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	slt $v0, $v0, $t8
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '1':
	li $v0, 1
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_4546
wtrue_4546:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_4546
wfalse_4546:
	la $a0, false_str
	li $v0, 4
	syscall
wend_4546:
	# Integer Constant '5':
	li $v0, 5

	# Assignement for the variable 'a':
	sw $v0, 0($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_800
wtrue_800:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_800
wfalse_800:
	la $a0, false_str
	li $v0, 4
	syscall
wend_800:
	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sub $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_1133
wtrue_1133:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_1133
wfalse_1133:
	la $a0, false_str
	li $v0, 4
	syscall
wend_1133:
	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sub $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sub $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_1740
wtrue_1740:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_1740
wfalse_1740:
	la $a0, false_str
	li $v0, 4
	syscall
wend_1740:
	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $v0, -4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($sp)
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sub $v0, $t8, $v0
	lw $t8, -4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_962
wtrue_962:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_962
wfalse_962:
	la $a0, false_str
	li $v0, 4
	syscall
wend_962:
	# Handle program exit
exit:
	li $v0, 10
	syscall

	 # Handle RUNTIME errors
div_by_zero:
	la $a0, div_by0
	li $v0, 4
	syscall
	j exit

