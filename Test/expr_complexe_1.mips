.data
	div_by0: .asciiz "[RUNTIME ERROR]: Division by zero detected.\n"
	true_str: .asciiz "vrai\n"
	false_str: .asciiz "faux\n"
.text

main:
	# Begin stackframe:
	move $s7, $sp
	# Allocate for the declared variables:
	addi $sp, $sp, -4

	# Integer Constant '25':
	li $v0, 25
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '13':
	li $v0, 13
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '13':
	li $v0, 13
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '16':
	li $v0, 16
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '100':
	li $v0, 100
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '2':
	li $v0, 2
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '100':
	li $v0, 100
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0

	# Call write sys call:​
	move $a0, $v0
	li $v0, 1
	syscall
	# Return to line:
	li $v0, 11 	# Syscall code for printing one char
	li $a0, '\n' 	# print new line char
	syscall

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_1140
wtrue_1140:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_1140
wfalse_1140:
	la $a0, false_str
	li $v0, 4
	syscall
wend_1140:
	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '25':
	li $v0, 25
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	nor $v0, $v0, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_6326
wtrue_6326:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_6326
wfalse_6326:
	la $a0, false_str
	li $v0, 4
	syscall
wend_6326:
	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '26':
	li $v0, 26
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	slt $v0, $v0, $t8
	nor $v0, $v0, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_3749
wtrue_3749:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_3749
wfalse_3749:
	la $a0, false_str
	li $v0, 4
	syscall
wend_3749:
	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '24':
	li $v0, 24
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	nor $v0, $v0, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_8460
wtrue_8460:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_8460
wfalse_8460:
	la $a0, false_str
	li $v0, 4
	syscall
wend_8460:
	# Integer Constant '1':
	li $v0, 1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '2':
	li $v0, 2
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '3':
	li $v0, 3
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	slt $v0, $v0, $t8
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	slt $v0, $v0, $t8
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	nor $v0, $v0, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_5463
wtrue_5463:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_5463
wfalse_5463:
	la $a0, false_str
	li $v0, 4
	syscall
wend_5463:
	# Integer Constant '1':
	li $v0, 1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '3':
	li $v0, 3
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	slt $v0, $v0, $t8
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	slt $v0, $v0, $t8
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_240
wtrue_240:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_240
wfalse_240:
	la $a0, false_str
	li $v0, 4
	syscall
wend_240:
	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '3':
	li $v0, 3
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	slt $v0, $v0, $t8
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_1373
wtrue_1373:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_1373
wfalse_1373:
	la $a0, false_str
	li $v0, 4
	syscall
wend_1373:
	# Integer Constant '5':
	li $v0, 5
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	slt $v0, $v0, $t8
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '1':
	li $v0, 1
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_9995
wtrue_9995:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_9995
wfalse_9995:
	la $a0, false_str
	li $v0, 4
	syscall
wend_9995:
	# Integer Constant '5':
	li $v0, 5

	# Assignement for the variable 'a':
	sw $v0, 0($s7)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_4366
wtrue_4366:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_4366
wfalse_4366:
	la $a0, false_str
	li $v0, 4
	syscall
wend_4366:
	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sub $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_5602
wtrue_5602:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_5602
wfalse_5602:
	la $a0, false_str
	li $v0, 4
	syscall
wend_5602:
	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sub $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sub $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_1269
wtrue_1269:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_1269
wfalse_1269:
	la $a0, false_str
	li $v0, 4
	syscall
wend_1269:
	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Addition:
	add $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Substraction:
	sub $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Division:
	# test si on divise par 0
	beqz $v0, div_by_zero
	div $t8, $v0
	mflo $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Multiplication:
	mul $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Integer Constant '6':
	li $v0, 6
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Less:
	slt $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Equal:
	sub $v0, $t8, $v0
	nor $v0, $v0, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# And:
	and $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	addi $sp, $sp, -4
	sw $v0, 4($sp)

	# Get value of the variable 'a':
	lw $v0, 0($s7)
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Not Equal:
	sub $v0, $t8, $v0
	lw $t8, 4($sp)
	addi $sp, $sp, 4
	# Or:
	or $v0, $t8, $v0

	 # Evalue if the expression is true or false
	beq $v0, $zero, wfalse_673
wtrue_673:
	la $a0, true_str
	li $v0, 4
	syscall
	j wend_673
wfalse_673:
	la $a0, false_str
	li $v0, 4
	syscall
wend_673:
	# Handle program exit
exit:
	li $v0, 10
	syscall

	 # Handle RUNTIME errors
div_by_zero:
	la $a0, div_by0
	li $v0, 4
	syscall
	j exit

