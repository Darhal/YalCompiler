package yal.analyse ;

import java.util.*;
import yal.arbre.* ;
import yal.arbre.expressions.* ;
import yal.arbre.instructions.* ;
import yal.declaration.*;
import yal.declaration.entries.*;
import yal.declaration.symbols.*;
import yal.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, LIRE, ECRIRE, EQUAL,
                   TANTQUE, REPETER, FINTANTQUE, SI, ALORS, SINON, FINSI,
                   PARA_OPEN, PARA_CLOSE;

terminal int       OP_PLUS, OP_MINUS, OP_MULTIPLY, OP_DIVIDE,
                   OP_GREATER, OP_LESS, OP_EQUAL, OP_NEQUAL, OP_AND,
                   OP_OR, OP_NOT;

terminal String    IDF, CSTENTIERE, TYPE;

/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG_BODY, PROG, LINST, INST, AFFECT, CONDITION, LOOP;
non terminal Expression EXP, LOGIC_EXP;
non terminal DECL_LIST, DECL_VAR;
// non terminal Integer OPER;


precedence left OP_PLUS, OP_MINUS;

precedence left OP_MULTIPLY, OP_DIVIDE;

precedence left OP_GREATER, OP_LESS, OP_EQUAL, OP_NEQUAL, OP_AND, OP_OR, OP_NOT;

/* ----------------------------Grammar Section-------------------- */

start with PROG ;

PROG        ::=     PROGRAMME  IDF  DEBUT PROG_BODY:prog  FIN
                    {: RESULT = prog ; :}
            ;

PROG_BODY   ::=     DECL_LIST LINST: li
                    {: RESULT = li ; :}
            |       LINST: li
                    {: RESULT = li ; :}
            ;

LINST       ::=     LINST:li  INST:i
                    {:
                        ((BlocDInstructions)li).ajouter(i);
                        RESULT = li ;
                    :}
            |
                    INST:i
                    {:
                        BlocDInstructions b = new BlocDInstructions(ileft + 1);
                        b.ajouter(i);
                        RESULT = b;
                    :}
            ;

DECL_LIST   ::=   DECL_VAR DECL_LIST | DECL_VAR ;

DECL_VAR    ::=   TYPE IDF:idf POINTVIRGULE
                  {:
                    TDS.Instance().AddEntry(new VariableEntry(idf, idfleft + 1),
                    new IntSymbol(), idfleft + 1);
                  :}
            ;

INST        ::=     AFFECT:aff {: RESULT = aff; :}
            |       CONDITION:cond {: RESULT = cond; :}
            |       LOOP:loop {: RESULT = loop; :}
            |
                    LIRE IDF:idf POINTVIRGULE
                    {:  Variable var = new Variable(new VariableEntry(idf, idfleft + 1), idfleft + 1);
                        RESULT = new Lire(var, idfleft + 1); :}
            |
                    ECRIRE EXP:e POINTVIRGULE
                    {: RESULT = new Ecrire(e, eleft + 1) ; :}
            ;

AFFECT      ::=     IDF:idf EQUAL EXP:e POINTVIRGULE
                    {:
                        Variable var = new Variable(new VariableEntry(idf, idfleft + 1), idfleft + 1);
                        RESULT = new Affectation(var, e, eleft + 1); :}
            ;

CONDITION   ::=     SI LOGIC_EXP:e ALORS LINST:li SINON LINST:oli FINSI
                    {:
                        Condition condition = new Condition(e, li, oli, eleft);
                        RESULT = condition;
                    :}
            |       SI LOGIC_EXP:e ALORS LINST:li FINSI
                    {:
                        Condition condition = new Condition(e, li, null, eleft);
                        RESULT = condition;
                    :}
            ;

LOOP        ::=    TANTQUE LOGIC_EXP:e REPETER LINST:li FINTANTQUE
                   {:
                        Loop loop = new Loop(e, li, eleft);
                        RESULT = loop;
                   :}
            ;

EXP         ::=
            IDF:idf{: RESULT = new Variable(new VariableEntry(idf, idfleft + 1), idfleft + 1); :}
            |CSTENTIERE:c{: RESULT = new ConstanteEntiere(c, cleft + 1); :}
            |PARA_OPEN EXP:e PARA_CLOSE{: RESULT = e; :}
            |OP_MINUS EXP:e{: RESULT = new UnaryOperation(e, OperatorsTypes.MINUS, ExpressionType.ARITHMETIC, eleft + 1); :}
            |EXP:e1 OP_PLUS EXP:e2{:RESULT = new BinaryOperation(e1, e2, OperatorsTypes.PLUS, ExpressionType.ARITHMETIC, e1left + 1);:}
            |EXP:e1 OP_MINUS EXP:e2{:RESULT = new BinaryOperation(e1, e2, OperatorsTypes.MINUS, ExpressionType.ARITHMETIC, e1left + 1);:}
            |EXP:e1 OP_MULTIPLY EXP:e2{:RESULT = new BinaryOperation(e1, e2, OperatorsTypes.MULTIPLY, ExpressionType.ARITHMETIC, e1left + 1);:}
            |EXP:e1 OP_DIVIDE EXP:e2{:RESULT = new BinaryOperation(e1, e2, OperatorsTypes.DIVIDE, ExpressionType.ARITHMETIC, e1left + 1);:}
            |LOGIC_EXP:lexp {:RESULT = lexp;:}
            ;

LOGIC_EXP   ::=
            OP_NOT EXP:e{: RESULT = new UnaryOperation(e, OperatorsTypes.NOT, ExpressionType.LOGIC, eleft + 1); :}
            |EXP:e1 OP_GREATER EXP:e2{:RESULT = new BinaryOperation(e1, e2, OperatorsTypes.GREATER, ExpressionType.LOGIC, e1left + 1);:}
            |EXP:e1 OP_LESS EXP:e2{:RESULT = new BinaryOperation(e1, e2, OperatorsTypes.LESS, ExpressionType.LOGIC, e1left + 1);:}
            |EXP:e1 OP_EQUAL EXP:e2{:RESULT = new BinaryOperation(e1, e2, OperatorsTypes.EQUAL, ExpressionType.LOGIC, e1left + 1);:}
            |EXP:e1 OP_NEQUAL EXP:e2{:RESULT = new BinaryOperation(e1, e2, OperatorsTypes.NEQUAL, ExpressionType.LOGIC, e1left + 1);:}
            |EXP:e1 OP_AND EXP:e2{:RESULT = new BinaryOperation(e1, e2, OperatorsTypes.AND, ExpressionType.LOGIC, e1left + 1);:}
            |EXP:e1 OP_OR EXP:e2{:RESULT = new BinaryOperation(e1, e2, OperatorsTypes.OR, ExpressionType.LOGIC, e1left + 1);:}
            ;
